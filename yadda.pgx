#------------------------------------------------------------------------------
# Pegex Grammar for Yadda 1.0
#
# This is a PEG (top-down) grammar for the Yadda 1.0 language. It is in the
# Pegex format, and can be used to construct a Yadda parser in any language
# where Pegex has been ported to. (Currently Perl, Ruby and JavaScript).
#
# Compared to the official YAML spec, this grammar should be much easier to
# read and understand. It will also be fully documented, and will attempt to
# have a test suite that exercises every rule path.
#
# The overall intent of this is to have one working grammar that backs up a
# full Yadda framework implementation in every programming language where Yadda
# is used. If this is acheived, then a bug in Yadda can be fixed in one place,
# for every language's implementaion.
#
# This grammar will go further than just parsing correct Yadda. It will also
# parse for common Yadda errors, and try to report the most useful error
# messages.
#------------------------------------------------------------------------------

# Notes:
# - Indentation will be done with indent / ondent / undent
# - Need to check some rules against spec for accuracy.
# - Make the grammar strict as possible until justified.
# - Need to look for common errors in the grammar, and report them.
# - Need to have tests for known errors.

%grammar yadda
%version 0.0.1

#------------------------------------------------------------------------------
# High Level Constructs
#------------------------------------------------------------------------------

# A Yadda Document is the top level rule, and accounts for the entirety of the
# text being parsed, but there can be ignorable comments on either side of a
# document.
yadda-document:
  ignore-line*
  top-node
  # It is important to make sure we are on a line boundary here:
  ignore-line*

# A top level node can be quite a few distinct things:
top-node:
  (
    | block-sequence
    | block-mapping
  ) ( EOL? )

#------------------------------------------------------------------------------
# Block Constructs
#------------------------------------------------------------------------------

# This rule identifies all the block nodes:
block-node:
  | block-sequence
  | block-mapping
  | block-scalar

# A block sequence is an indented set of nodes each starting with a
# dash+space:
block-sequence:
  block-sequence-entry+

# TODO This needs to support and block-node:
block-sequence-entry:
  / DASH SPACE+ block-scalar EOL /

# A block mapping is an indented set of key / value pairs separated by
# colon+space:
block-mapping:
  block-indent
  block-mapping-pair+
  block-undent

# A block mapping pair is a key / value separated by colon+space:
block-mapping-pair:
  block-ondent
  block-key
  block-mapping-separator
  block-value

# block key scalar, has more limitations than a block value scalar.
block-key: / block-scalar (= block-mapping-separator ) /

# A block value can be any block node:
block-value:
  | empty-flow-mapping
  | flow-sequence
  | block-node

# A scalar in block form can take one of these 5 forms:
block-scalar: /
  ( literal-scalar
  | folded-scalar
  | double-quoted-scalar
  | single-quoted-scalar
  | block-plain-scalar
  )
/

#------------------------------------------------------------------------------
# Flow Constructs:
#------------------------------------------------------------------------------

# A flow sequence is zero or more nodes, separated by commas, inside square
# brackets.
flow-sequence:
  flow-sequence-start
  flow-sequence-entry* % list-separator
  flow-sequence-end

empty-flow-mapping: '{}'

# A flow sequence entry is any flow node. This rule is an alias, and can maybe
# go away later, but leaving this way now for clarity.
flow-sequence-entry: flow-scalar

# A flow scalar only has 3 basic forms:
low-scalar: /
  ( double-quoted-scalar
  | single-quoted-scalar
  | flow-plain-scalar
  )
/

# Starting and ending rules for flow sequences:
flow-sequence-start: / SPACE* '[' SPACE* /
flow-sequence-end: / SPACE* ']' SPACE* /

#------------------------------------------------------------------------------
# Scalar Constructs
#------------------------------------------------------------------------------

# Literal scalar.
# XXX Dummied out for now.
literal-scalar: /
  (:
    SINGLE SINGLE SINGLE |
    DOUBLE DOUBLE DOUBLE
  )
  EOL 'XXX'
/

# Folded scalar.
# XXX Dummied out for now.
folded-scalar: / [ SINGLE DOUBLE ] EOL 'XXX' /

# Double quoted scalar.
# XXX Needs work.
double-quoted-scalar: / DOUBLE [^ DOUBLE]* DOUBLE /

# Single quoted scalar.
# XXX Needs work.
single-quoted-scalar: / SINGLE [^ SINGLE]* SINGLE /

# Plain (unquoted) scalars can't start with syntax chars, and can't contain
# colon+space.
block-plain-scalar: /
  (! char-non-start)
  ANY+?
  (= EOL | EOS)
/

#------------------------------------------------------------------------------
# Other Constructs:
#------------------------------------------------------------------------------

# block-indent: # This rule is written in code in the Grammar class.
# block-ondent: # This rule is written in code in the Grammar class.
# block-undent: # This rule is written in code in the Grammar class.

# Mapping key / value is always separated by ': ' (colon + space)
block-mapping-separator: / ':' (: SPACE+ | SPACE* (= EOL)) /

# List items separated by ',' (comma)
# XXX Check spec if SPACE is needed
list-separator: / ',' SPACE+ /

# List of single chars that are YAML syntax (and thus avoided in various
# contexts:
chars-syntax: /
  AMP
  STAR
  HASH
  LCURLY
  RCURLY
  LSQUARE
  RSQUARE
  PERCENT
/

# YAML's Reserved Chars:
chars-reserved: /
  GRAVE
  AT
/

char-non-start: /[
  chars-syntax
  chars-reserved
]/


#------------------------------------------------------------------------------
# Whitespace Rules:
#------------------------------------------------------------------------------

# TODO Need to determine the - and + whitespace rule.

# Ignore comments and whitespace until end of line.
ignore-line: / ignore-text (= EOL) /

# Ignorable text is spaces, tabs and a line comment.
ignore-text: / (: comment-text | blank-text ) /

# A '#' starts a comment until end of line.
comment-text: / HASH ANY* /

# Spaces and tabs.
blank-text: / BLANK* /

# Vim Helpers, until we get `pegex.vim` mode.
# vim: set lisp sw=2:
